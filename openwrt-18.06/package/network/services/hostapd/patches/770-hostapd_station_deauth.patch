diff -uprN hostapd-2018-05-21-62566bc2.orig/src/ap/hostapd.c hostapd-2018-05-21-62566bc2/src/ap/hostapd.c
--- hostapd-2018-05-21-62566bc2.orig/src/ap/hostapd.c	2019-11-29 16:58:06.724035863 +0800
+++ hostapd-2018-05-21-62566bc2/src/ap/hostapd.c	2019-11-29 17:01:02.708043248 +0800
@@ -143,6 +143,7 @@ static void hostapd_reload_bss(struct ho
 			wpa_printf(MSG_ERROR, "Failed to configure WPA IE for "
 				   "the kernel driver.");
 	} else if (hapd->wpa_auth) {
+		rsn_preauth_iface_deinit(hapd);
 		wpa_deinit(hapd->wpa_auth);
 		hapd->wpa_auth = NULL;
 		hostapd_set_privacy(hapd, 0);
@@ -184,6 +185,24 @@ static void hostapd_clear_old(struct hos
 	}
 }
 
+/* deauth all stations connected */
+void hostapd_sta_deauth_all(struct hostapd_data *hapd)
+{
+	struct hostapd_iface *iface = hapd->iface;
+	size_t j;
+
+	for (j = 0; j < iface->num_bss; j++) {
+		hostapd_flush_old_stations(iface->bss[j],
+					   WLAN_REASON_PREV_AUTH_NOT_VALID);
+		hostapd_broadcast_wep_clear(iface->bss[j]);
+
+#ifndef CONFIG_NO_RADIUS
+		/* TODO: update dynamic data based on changed configuration
+		 * items (e.g., open/close sockets, etc.) */
+		radius_client_flush(iface->bss[j]->radius, 0);
+#endif /* CONFIG_NO_RADIUS */
+	}
+}
 
 int hostapd_reload_config(struct hostapd_iface *iface)
 {
diff -uprN hostapd-2018-05-21-62566bc2.orig/src/ap/hostapd.h hostapd-2018-05-21-62566bc2/src/ap/hostapd.h
--- hostapd-2018-05-21-62566bc2.orig/src/ap/hostapd.h	2019-11-29 16:58:06.728035863 +0800
+++ hostapd-2018-05-21-62566bc2/src/ap/hostapd.h	2019-11-29 17:01:37.064044690 +0800
@@ -576,6 +576,7 @@ void
 hostapd_switch_channel_fallback(struct hostapd_iface *iface,
 				const struct hostapd_freq_params *freq_params);
 void hostapd_cleanup_cs_params(struct hostapd_data *hapd);
+void hostapd_sta_deauth_all(struct hostapd_data *hapd);
 void hostapd_periodic_iface(struct hostapd_iface *iface);
 int hostapd_owe_trans_get_info(struct hostapd_data *hapd);
 
diff -uprN hostapd-2018-05-21-62566bc2.orig/src/ap/ubus.c hostapd-2018-05-21-62566bc2/src/ap/ubus.c
--- hostapd-2018-05-21-62566bc2.orig/src/ap/ubus.c	2019-11-29 16:58:06.720035862 +0800
+++ hostapd-2018-05-21-62566bc2/src/ap/ubus.c	2019-11-29 17:02:55.224047970 +0800
@@ -373,6 +373,16 @@ hostapd_bss_wps_cancel(struct ubus_conte
 }
 
 static int
+hostapd_sta_deauth(struct ubus_context *ctx, struct ubus_object *obj,
+			struct ubus_request_data *req, const char *method,
+			struct blob_attr *msg)
+{
+	struct hostapd_data *hapd = container_of(obj, struct hostapd_data, ubus.obj);
+	hostapd_sta_deauth_all(hapd);
+	return 0;
+}
+
+static int
 hostapd_bss_update_beacon(struct ubus_context *ctx, struct ubus_object *obj,
 			struct ubus_request_data *req, const char *method,
 			struct blob_attr *msg)
@@ -1106,6 +1116,7 @@ static const struct ubus_method bss_meth
 	UBUS_METHOD_NOARG("list_bans", hostapd_bss_list_bans),
 	UBUS_METHOD_NOARG("wps_start", hostapd_bss_wps_start),
 	UBUS_METHOD_NOARG("wps_cancel", hostapd_bss_wps_cancel),
+	UBUS_METHOD_NOARG("deauth", hostapd_sta_deauth),
 	UBUS_METHOD_NOARG("update_beacon", hostapd_bss_update_beacon),
 	UBUS_METHOD_NOARG("get_features", hostapd_bss_get_features),
 #ifdef NEED_AP_MLME
