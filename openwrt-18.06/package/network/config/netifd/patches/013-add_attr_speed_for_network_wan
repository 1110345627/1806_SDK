diff -uprN netifd-2018-12-16-2750ce2e.orig/device.c netifd-2018-12-16-2750ce2e/device.c
--- netifd-2018-12-16-2750ce2e.orig/device.c	2019-12-02 16:38:04.447122573 +0800
+++ netifd-2018-12-16-2750ce2e/device.c	2019-12-02 16:39:59.119127385 +0800
@@ -38,6 +38,7 @@ static const struct blobmsg_policy dev_a
 	[DEV_ATTR_TYPE] = { .name = "type", .type = BLOBMSG_TYPE_STRING },
 	[DEV_ATTR_MTU] = { .name = "mtu", .type = BLOBMSG_TYPE_INT32 },
 	[DEV_ATTR_MTU6] = { .name = "mtu6", .type = BLOBMSG_TYPE_INT32 },
+	[DEV_ATTR_SPEED] = { .name = "speed", .type = BLOBMSG_TYPE_STRING },
 	[DEV_ATTR_MACADDR] = { .name = "macaddr", .type = BLOBMSG_TYPE_STRING },
 	[DEV_ATTR_TXQUEUELEN] = { .name = "txqueuelen", .type = BLOBMSG_TYPE_INT32 },
 	[DEV_ATTR_ENABLED] = { .name = "enabled", .type = BLOBMSG_TYPE_BOOL },
@@ -202,6 +203,9 @@ device_merge_settings(struct device *dev
 	memset(n, 0, sizeof(*n));
 	n->mtu = s->flags & DEV_OPT_MTU ? s->mtu : os->mtu;
 	n->mtu6 = s->flags & DEV_OPT_MTU6 ? s->mtu6 : os->mtu6;
+	memcpy(n->speed,
+				(s->flags & DEV_OPT_SPEED ? s->speed : os->speed),
+				sizeof(n->speed));
 	n->txqueuelen = s->flags & DEV_OPT_TXQUEUELEN ?
 		s->txqueuelen : os->txqueuelen;
 	memcpy(n->macaddr,
@@ -262,6 +266,14 @@ device_init_settings(struct device *dev,
 		s->flags |= DEV_OPT_MTU6;
 	}
 
+	if ((cur = tb[DEV_ATTR_SPEED])) {
+		ea = blobmsg_data(cur);
+		if (ea) {
+			memcpy(s->speed, ea, sizeof(s->speed));
+			s->flags |= DEV_OPT_SPEED;
+		}
+	}
+
 	if ((cur = tb[DEV_ATTR_TXQUEUELEN])) {
 		s->txqueuelen = blobmsg_get_u32(cur);
 		s->flags |= DEV_OPT_TXQUEUELEN;
@@ -1030,6 +1042,8 @@ device_dump_status(struct blob_buf *b, s
 			blobmsg_add_u32(b, "mtu", st.mtu);
 		if (st.flags & DEV_OPT_MTU6)
 			blobmsg_add_u32(b, "mtu6", st.mtu6);
+		if (st.flags & DEV_OPT_SPEED)
+			blobmsg_add_string(b, "speed", st.speed);
 		if (st.flags & DEV_OPT_MACADDR)
 			blobmsg_add_string(b, "macaddr", format_macaddr(st.macaddr));
 		if (st.flags & DEV_OPT_TXQUEUELEN)
diff -uprN netifd-2018-12-16-2750ce2e.orig/device.h netifd-2018-12-16-2750ce2e/device.h
--- netifd-2018-12-16-2750ce2e.orig/device.h	2019-12-02 16:38:04.447122573 +0800
+++ netifd-2018-12-16-2750ce2e/device.h	2019-12-02 16:42:20.663133325 +0800
@@ -30,6 +30,7 @@ enum {
 	DEV_ATTR_TYPE,
 	DEV_ATTR_MTU,
 	DEV_ATTR_MTU6,
+	DEV_ATTR_SPEED,
 	DEV_ATTR_MACADDR,
 	DEV_ATTR_TXQUEUELEN,
 	DEV_ATTR_ENABLED,
@@ -112,6 +113,7 @@ enum {
 	DEV_OPT_BRINPUT_DISABLE		= (1 << 25),
 	DEV_OPT_NETISOLATE		= (1 << 26),
 	DEV_OPT_COND_HIDDEN		= (1 << 27),
+	DEV_OPT_SPEED			= (1 << 28),
 };
 
 /* events broadcasted to all users of a device */
@@ -157,6 +159,7 @@ struct device_settings {
 	unsigned int valid_flags;
 	unsigned int mtu;
 	unsigned int mtu6;
+	char speed[8];
 	unsigned int txqueuelen;
 	uint8_t macaddr[6];
 	bool ipv6;
diff -uprN netifd-2018-12-16-2750ce2e.orig/system.h netifd-2018-12-16-2750ce2e/system.h
--- netifd-2018-12-16-2750ce2e.orig/system.h	2019-12-02 16:38:04.443122572 +0800
+++ netifd-2018-12-16-2750ce2e/system.h	2019-12-02 16:45:30.915141309 +0800
@@ -233,5 +233,6 @@ time_t system_get_rtime(void);
 void system_fd_set_cloexec(int fd);
 
 int system_update_ipv6_mtu(struct device *dev, int mtu);
+int system_update_wan_speed(const char *name, char *speed);
 
 #endif
diff -uprN netifd-2018-12-16-2750ce2e.orig/system-linux.c netifd-2018-12-16-2750ce2e/system-linux.c
--- netifd-2018-12-16-2750ce2e.orig/system-linux.c	2019-12-02 16:38:04.447122573 +0800
+++ netifd-2018-12-16-2750ce2e/system-linux.c	2019-12-02 16:44:35.063138965 +0800
@@ -1674,18 +1674,26 @@ system_if_apply_settings(struct device *
 
 int system_if_up(struct device *dev)
 {
+	int ret;
 	system_if_get_settings(dev, &dev->orig_settings);
 	/* Only keep orig settings based on what needs to be set */
 	dev->orig_settings.valid_flags = dev->orig_settings.flags;
 	dev->orig_settings.flags &= dev->settings.flags;
 	system_if_apply_settings(dev, &dev->settings, dev->settings.flags);
-	return system_if_flags(dev->ifname, IFF_UP, 0);
+	ret = system_if_flags(dev->ifname, IFF_UP, 0);
+	if (dev->settings.flags & DEV_OPT_SPEED) {
+		system_update_wan_speed(dev->ifname, (&dev->settings)->speed);
+	}
+	return ret;
 }
 
 int system_if_down(struct device *dev)
 {
 	int ret = system_if_flags(dev->ifname, 0, IFF_UP);
 	system_if_apply_settings(dev, &dev->orig_settings, dev->orig_settings.flags);
+	if (dev->orig_settings.flags & DEV_OPT_SPEED) {
+		system_update_wan_speed(dev->ifname, (&dev->orig_settings)->speed);
+	}
 	return ret;
 }
 
@@ -3270,6 +3278,29 @@ out:
 	return ret;
 }
 
+int system_update_wan_speed(const char *name, char *speed)
+{
+	netifd_log_message(L_NOTICE, "%s:Set interface:%s speed:%s\n", __func__, name, speed);
+	if (!strncmp(speed, "auto", 4)){
+		if (!strncmp(name, "eth1", 4))
+		  system("ethtool -s eth1 autoneg on");
+		else
+		  system("echo 0x8 0x4 0x0 0x1000 0x1e1 > /sys/kernel/debug/npu_debug");
+	}else if (!strncmp(speed, "10mfull", 7)){
+		if (!strncmp(name, "eth1", 4))
+		  system("ethtool -s eth1 autoneg off speed 10 duplex full");
+		else
+		  system("echo 0x8 0x4 0x0 0x100 0x61 > /sys/kernel/debug/npu_debug");
+	}else if (!strncmp(speed, "10mhalf", 7)){
+		if (!strncmp(name, "eth1", 4))
+		  system("ethtool -s eth1 autoneg off speed 10 duplex half");
+		else
+		  system("echo 0x8 0x4 0x0 0x0 0x21 > /sys/kernel/debug/npu_debug");
+	}
+
+	return 0;
+}
+
 int system_add_ip_tunnel(const char *name, struct blob_attr *attr)
 {
 	struct blob_attr *tb[__TUNNEL_ATTR_MAX];
